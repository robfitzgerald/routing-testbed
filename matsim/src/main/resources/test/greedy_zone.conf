io {
  matsim-network-file = "test"
  population-file = "test"
  matsim-config-file = "test"
  name-prefix = "test"
  matsim-log-level = "DEBUG"
}

run {
  last-iteration = 0
  so-routing-iteration-cycle = 0
  so-first-iteration: true
  start-of-sim-time = 0
  end-of-sim-time = 86400
  end-of-routing-time = 86399
  matsim-step-size = 1.0
  matsim-semaphore-timeout-ms = 10000
  simulation-tail-timeout = "5 minutes"
}

routing {
  batch-window = 15
  max-path-assignments = 20 # > 1 for dynamic replanning
  reasonable-replanning-lead-time = 60 # seconds into the future of this agent's path
  minimum-replanning-wait-time = 60 # seconds between replanning attempts
  minimum-remaining-route-time-for-replanning = 60 # seconds travel estimated remaining to consider replanning
  request-update-cycle = 15 # how often to update Request information for replan-able agents (which will incur some cost to compute)
}

algorithm {
  type = system-optimal
  name = "greedy_zone"
  ksp-algorithm = {
    type = svp-lo-sync
    k = 20
    theta = 0.5
    ksp-termination-function = {
      type = paths-seen
      seen = 30
    }
  }

  selection-algorithm = {
    type = greedy
    seed = 0
    selection-termination-function = {
      type = compute-budget
      duration-ms = 1000
    }
  }

    batching-function = {
      type = greedy
      batch-window = ${routing.batch-window}
      minimum-replanning-wait-time = 1
      max-batch-size = 10
    }

  path-to-marginal-flows-function.type = default
  combine-flows-function.type = sum

  marginal-cost-function = {
    type = edge-bpr-function
    alpha = 0.15
    beta = 4.0
  }
}