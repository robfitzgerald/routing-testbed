scenarioBasePath = "/Users/robertfitzgerald/dev/ucd/phd/projects/2019su/SOTestbed/matsim/src/main/resources"
//io.output-base-directory = "/Volumes/bingo_bingo/UCDenver/20200630-test-logging"
io.output-base-directory = "/Users/robertfitzgerald/dev/ucd/phd/projects/2020sp/so-testbed-results"
//io.routing-report-config.type = inactive
io.routing-report-config.type = all-aggregate
name = "baseline"

routing.adoption-rate = 0.5
algorithm.batching-function.max-batch-size = 10000
algorithm.batching-function.split-factor = 7
algorithm.ksp-algorithm.k = 10
algorithm.name = "od_svp_localmcts" // ["od_svp_localmcts", "selfish"]
routing.batch-window = 60
algorithm.batching-function.batch-type = ["c"]
pop.size = 10000
routing.max-path-assignments = 1440
use-free-flow-network-costs-in-path-search = true

//algorithm.selection-algorithm.selection-termination-function = {
//  type = compute-budget
//  duration-ms = 2000
//}

//algorithm.selection-algorithm = {
//  type = tsp-selection
//}

//algorithm.selection-algorithm = {
//  type = local-mcts-selection
//  seed = 0
//  minimum-average-batch-travel-improvement = 0.0
//  exhaustive-search-sample-limit = 1
//
//  selection-termination-function = {
//    type = percent-explored-with-compute-budget
//    target-search-space-exploration-ratio = 0.5
//    duration-ms = 30000
//  }
//}

algorithm.selection-algorithm = {
  type = tsp-selection
}

algorithm.batching-function = {
  type = greedy           // no sub batches
  max-batch-size = 999999 // no limit to batch size
}

algorithm.batch-filter-function = {
  type = top-k-ranking-batch-filter
  k = 1
  min-batch-search-space = 10000
  batch-overlap-function = {
    type = agent-proportional // agent-proportional, batch-proportional
    path-overlap-lookup-type.type = tsp // tsp, all-paths
    use-link-weights = true
  }
}

//algorithm.selection-algorithm = {
//  type = random-sampling-selection
//
//  seed = 0
//  exhaustive-search-sample-limit = 1
//
//  selection-termination-function = {
//    type = percent-explored-with-compute-budget
//    target-search-space-exploration-ratio = 1.0
//    duration-ms = 5000
//  }
//
//  selection-acceptance-function = {
//    type = dismiss-complete-searches
//  }
//}

// algorithm.batch-filter-function.type = no-filter // no batch filtering

algorithm.ksp-algorithm = {
  k = 10
  theta = 0.67  // 2/3 of path can overlap but 1/3 must be unique
}

// 20201207 - maybe this will help the assignment algorithms do their thing
algorithm.ksp-filter-function = {
  type = lim-samp-lim
  max-edge-visits = 2
  travel-time-threshold = 120
}


//algorithm.selection-algorithm.type = tsp-selection // just allows all SO agents to just be selfishly replanned

// block improvements that are so low that they may be dis-improvements due to the error between BPR and MATSim's fundimental diagram
// setting this greater than 0 also prevents replanning agents with selfish plans
// (when SO == UE and improvement is 0, selfish is *the best choice* to make at this time - but, what about making *no choice* and
// sending *no route* when this is the case? that will happen when min avg improvement > 0.0)
//routing.minimum-average-improvement = [0]
//routing.minimum-average-improvement = [0.000001]


//routing.min-request-update-threshold = [10]                                    # how much time should elapse between updates to Request information for replan-able agents (which will incur some cost to compute)
//routing.min-network-update-threshold = [600]                                       # how much time should elapse between updates to the network state
