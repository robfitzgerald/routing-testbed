io {
  matsim-network-file = "/Users/robertfitzgerald/dev/ucd/phd/projects/2019su/SOTestbed/matsim/src/main/resources/matsim/network/rye-network.xml"
  population-file = "/Users/robertfitzgerald/dev/ucd/phd/projects/2019su/SOTestbed/matsim/src/main/resources/matsim/population/rye/rye-population.xml"
  matsim-config-file = "/Users/robertfitzgerald/dev/ucd/phd/projects/2019su/SOTestbed/matsim/src/main/resources/matsim/config/matsim-config.xml"
  name-prefix = "matsim-rye"
  matsim-log-level = "WARN"
}

run {
  start-of-sim-time = 0
  end-of-sim-time = 86400
  end-of-routing-time = 86399
  matsim-step-size = 1.0
  matsim-semaphore-timeout-ms = 5000
  simulation-tail-timeout = "5 seconds"
}

routing {
  batch-window = 15
  max-path-assignments = 20                       # > 1 for dynamic replanning
  reasonable-replanning-lead-time = 0             # seconds into the future of this agent's path
  min-batch-size = 3                              # agents required to constitute a "group" for batch routing, otherwise selfish
  minimum-replanning-wait-time = 0                # seconds between replanning attempts
  minimum-remaining-route-time-for-replanning = 0 # seconds travel estimated remaining to consider replanning
  request-update-cycle = 5                        # how often to update Request information for replan-able agents (which will incur some cost to compute)
  selfish {
    type = dijkstra
    path-to-marginal-flows-function.type = default
    combine-flows-function.type = sum
    marginal-cost-function = {
      type = edge-bpr
      alpha = 0.15
      beta = 4.0
    }
  }
  //  selfish {
  //    type = matsim
  //    last-iteration = 0
  //    so-routing-iteration-cycle = 0
  //    so-first-iteration: true
  //  }
}

algorithm {
  type = system-optimal
  name = "randsamp"

  ksp-algorithm = {
    type = svp-lo-sync
    k = 10
    theta = 0.5
    ksp-termination-function = {
      type = paths-seen
      seen = 30
    }
  }

  selection-algorithm = {
    type = random-sampling-selection
    seed = 0
    selection-termination-function = {
      type = compute-budget
      duration-ms = 1000
    }
  }

//  selection-algorithm = {
//    type = local-mcts-selection
//    seed = 0
//    selection-termination-function = {
//      type = compute-budget
//      duration-ms = 1000
//    }
//  }

  //  batching-function = {
  //    type = greedy
  //    batch-window = ${routing.batch-window}
  //    minimum-replanning-wait-time = ${routing.minimum-replanning-wait-time}
  //    max-batch-size = 10
  //  }

  batching-function {
    type = "greedy-coordinate-origin-destination-grouping"
    batch-window = ${routing.batch-window}
    minimum-replanning-wait-time = ${routing.minimum-replanning-wait-time}
    max-batch-size = 10
    min-x = -8205949.4370
    max-x = -8199945.6429 # 6003.794 x-range
    min-y = 5003712.3316
    max-y = 5011004.0067  # 7291.675 y-range
    split-factor = 3
    batch-path-time-delay = 0 // how far in agent's future to find their position in grid
  }

  //  path-to-marginal-flows-function = {
  //    type = link-decay
  //    rate = 1.0 # no decay
  //  }

  path-to-marginal-flows-function.type = default
  combine-flows-function.type = sum

  marginal-cost-function = {
    type = edge-bpr
    alpha = 0.15
    beta = 4.0
  }
}