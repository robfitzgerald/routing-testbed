io.output-base-directory = "/Users/robertfitzgerald/dev/ucd/phd/projects/2020sp/so-testbed-results"
use-free-flow-network-costs-in-path-search = false
io.routing-report-config.type = inactive
//io.routing-report-config.type = all-reporting
//io.routing-report-config.type = batch-learning
//io.routing-report-config.type = complete-path
//io.routing-report-config.type = aggregate-data
io.matsim-log-level = "WARN"

run {
  start-of-sim-time = 0
  end-of-sim-time = 86400
  end-of-routing-time = 86399
  matsim-step-size = 1.0
  matsim-semaphore-timeout-ms = 60000
  simulation-tail-timeout = "2 minutes"
}

routing {
  max-path-assignments = 86400                                           # > 1 for dynamic replanning, 86400 for one per second
  minimum-replanning-lead-time = 30                                      # seconds into the future of this agent's path. should be > request-update-cycle
  min-batch-size = 2                                                     # agents required to constitute a "group" for batch routing, otherwise selfish
  min-batch-search-space = 0                                             # ignore batches which produce problem sizes smaller than this
  minimum-replanning-wait-time = ${routing.batch-window}                 # seconds between replanning attempts
  minimum-remaining-route-time-for-replanning = ${routing.batch-window}  # seconds travel estimated remaining to consider replanning
  minimum-average-improvement = 0                                        # ignore reassignments when the estimated travel time improvement is lower than this, per agent
  min-request-update-threshold = ${routing.batch-window}                 # how much time should elapse between updates to Request information for replan-able agents (which will incur some cost to compute)
  min-network-update-threshold = ${routing.batch-window}                 # how much time should elapse between updates to the network state
  selfish {
    type = dijkstra
    path-to-marginal-flows-function.type = default
    combine-flows-function.type = sum
    marginal-cost-function = {
      type = edge-bpr-function
      alpha = 0.15
      beta = 4.0
    }
  }
}

population {
  work-activity-min-time = "08:30:00"
  work-activity-max-time = "09:30:00"
  work-duration-hours    = 8
}

algorithm {
//  type = system-optimal

//  ksp-algorithm = {
//    type = svp-lo-sync
//    k = 10
//    theta = 0.5
//    ksp-termination-function = {
//      type = paths-seen
//      seen = 30
//    }
//  }

  ksp-filter-function.type = do-nothing
//  ksp-filter-function.type = sample-from-remaining-distance-proportion
//  ksp-filter-function = {
//    type = limited-edge-visits
//    max-edge-visits = 2
//  }

  //  selection-algorithm = {
  //    type = random-sampling-selection
  //    seed = 0
  //    selection-termination-function = {
  //      type = compute-budget
  //      duration-ms = 1000
  //    }
  //  }

//  selection-algorithm = {
//    type = local-mcts-selection
//    seed = 0
//    selection-termination-function = {
//      type = compute-budget
//      duration-ms = 1000
//    }
//  }

//    batching-function.type = no-batching

//    batching-function = {
//      type = greedy
//      batch-window = ${routing.batch-window}
//      minimum-replanning-wait-time = ${routing.minimum-replanning-wait-time}
//      min-batch-size = 2
//      max-batch-size = 10
//    }

//  batching-function {
//    type = "random"
//    batch-window = 60
//    max-batch-size = 999999
//  }

//  batching-function {
//    type = "greedy"
//    max-batch-size = 999999
//    max-batch-radius = 1000 // in CRS, so this should be approx. meters
//  }

//  batching-function {
//    type = "coordinate-grid-grouping"
//    max-batch-size = 999999 // no limit to batch size
//    batch-type = "c"
//  }

//  batching-function {
//    type = "label-based-trajectory-grouping"
//    omega-delta = 0.5
//    omega-beta = 0.5
//    omega-a = 0.5
//    omega-s = 0.5
//    max-iterations = 100
//    max-runtime-milliseconds = 10000
//    trajectory-time-limit = 300 // seconds into the agent's experienced (past) route to include
//  }

  batch-filter-function.type = no-filter

//  batch-filter-function = {
//    type = top-k-ranking-batch-filter
//    k = 1
//    batch-overlap-function = {
//      type = agent-proportional
//      path-overlap-lookup-type.type = tsp
//      overlap-cost-type.type = normalized // non-normalized
//      use-link-weights = true
//    }
//  }

  edge-update-function.type = flow-count
//  edge-update-function.type = flow-count-delta
//  edge-update-function = {
//    type = flow-rate
//    buffer-time = 5  // smoothing function - smooths transitions by averaging values in this buffer
//  }
//  edge-update-function = {
//    type = marginal-flow-and-decay
//    decay = 0.1
//    epsilon = 0.5
//  }

  path-to-marginal-flows-function.type = default
//    path-to-marginal-flows-function = {
//      type = link-decay
//      rate = 1.0 # no decay
//    }

  combine-flows-function.type = sum

  marginal-cost-function = {
    type = edge-bpr-function
    alpha = 0.15
    beta = 4.0
  }
}